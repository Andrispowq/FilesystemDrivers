#ifndef FAT32_DRIVER_H
#define FAT32_DRIVER_H

#include "FAT32defs.h"

#include <map>
#include <vector>

const char BootCode[] = { 0xFA, 0x31, 0xC0, 0x8E, 0xD0, 0x89, 0xC4, 0x8E, 0xD8, 0x8E,
	0xC0, 0xEA, 0x6A, 0x7C, 0x00, 0x00, 0x88, 0x16, 0x74, 0x7D, 0xBC, 0x00, 0x7C, 0x89,
	0xE5, 0xFB, 0xE8, 0xF6, 0x00, 0xBB, 0x75, 0x7D, 0xE8, 0x1D, 0x00, 0xE8, 0x37, 0x00,
	0xE8, 0x27, 0x00, 0xB8, 0x02, 0x00, 0xBB, 0x00, 0x80, 0xB9, 0x40, 0x00, 0x8A, 0x16,
	0x74, 0x7D, 0xE8, 0x68, 0x00, 0xEA, 0x00, 0x80, 0x00, 0x00, 0xEB, 0xFE, 0x60, 0x8A,
	0x07, 0x3C, 0x00, 0x74, 0x07, 0xB4, 0x0E, 0xCD, 0x10, 0x43, 0xEB, 0xF3, 0x61, 0xC3,
	0x60, 0xB4, 0x0E, 0xB0, 0x0A, 0xCD, 0x10, 0xB0, 0x0D, 0xCD, 0x10, 0x61, 0xC3, 0x60,
	0xB9, 0x00, 0x00, 0x83, 0xF9, 0x04, 0x74, 0x1C, 0x89, 0xD0, 0x83, 0xE0, 0x0F, 0x04,
	0x30, 0x3C, 0x39, 0x7E, 0x02, 0x04, 0x07, 0xBB, 0xE9, 0x7C, 0x29, 0xCB, 0x88, 0x07,
	0xC1, 0xCA, 0x04, 0x83, 0xC1, 0x01, 0xEB, 0xDF, 0xBB, 0xE4, 0x7C, 0xE8, 0xB8, 0xFF,
	0x61, 0xC3, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x00, 0x10, 0x00, 0x40, 0x00, 0x00,
	0x80, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x89, 0x0E,
	0xED, 0x7C, 0x89, 0x1E, 0xEF, 0x7C, 0x66, 0xA3, 0xF3, 0x7C, 0xB4, 0x41, 0xBB, 0xAA,
	0x55, 0xCD, 0x13, 0x72, 0x0B, 0xBE, 0xEB, 0x7C, 0xB4, 0x42, 0xCD, 0x13, 0x72, 0x0D,
	0x61, 0xC3, 0xBB, 0x37, 0x7D, 0xE8, 0x78, 0xFF, 0xE8, 0x85, 0xFF, 0xEB, 0xFE, 0xBB,
	0x5C, 0x7D, 0xE8, 0x6D, 0xFF, 0xE8, 0x7A, 0xFF, 0x88, 0xE6, 0xE8, 0x82, 0xFF, 0xEB,
	0xFE, 0x49, 0x4E, 0x54, 0x20, 0x31, 0x33, 0x48, 0x20, 0x4C, 0x42, 0x41, 0x20, 0x65,
	0x78, 0x74, 0x65, 0x6E, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x73,
	0x75, 0x70, 0x70, 0x6F, 0x72, 0x74, 0x65, 0x64, 0x21, 0x00, 0x44, 0x69, 0x73, 0x6B,
	0x20, 0x72, 0x65, 0x61, 0x64, 0x20, 0x65, 0x72, 0x72, 0x6F, 0x72, 0x21, 0x00, 0xE4,
	0x92, 0x0C, 0x02, 0xE6, 0x92, 0xC3, 0x00, 0x48, 0x61, 0x63, 0x6B, 0x4F, 0x53, 0x20,
	0x62, 0x6F, 0x6F, 0x74, 0x6C, 0x6F, 0x61, 0x64, 0x65, 0x72, 0x20, 0x6C, 0x6F, 0x61,
	0x64, 0x65, 0x64, 0x21, 0x20, 0x44, 0x69, 0x73, 0x6B, 0x3A, 0x20, 0x00, 0x90, 0x90,
	0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
	0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
	0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
	0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
	0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
	0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
	0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
	0x90, 0x90, 0x90, 0x90 };

struct FAT32_Data
{
	std::string name = "";

	uint16_t BytesPerSector = 512;
	uint8_t SectorsPerCluster = 8;
	uint16_t ReservedSectors = 32;
	uint8_t NumberOfFATs = 2;
	uint8_t MediaType = 0xF0;
	uint16_t SectorsPerTrack = 63;
	uint16_t HeadsPerCylinder = 16;
	uint32_t HiddenSectors = 0;
	uint32_t TotalSectors;

	uint32_t SectorsPerFAT;
	uint16_t Flags = 0;
	uint16_t Version = 0;
	uint32_t RootDirStart = 2;
	uint16_t FSInfoSector = 1;
	uint16_t BackupBootSector = 6;

	uint32_t Reserved0 = 0;
	uint32_t Reserved1 = 0;
	uint32_t Reserved2 = 0;

	uint8_t DriveNumber = 0x80;
	uint8_t Reserved3 = 0;
	uint8_t BootSignature = 41;
	uint32_t VolumeSerial = 0;
	char VolumeLabel[12] = "NO NAME    ";
	char Name[9] = "FAT32   ";
};

class FAT32Driver
{
public:
	FAT32Driver(const std::string& image);
	~FAT32Driver();

	//if exclude is true, we only give back entries with filter_attributes as their attributes
	//otherwise, we ignore entries that have filter_attributes set
	std::vector<DirEntry> GetDirectories(uint32_t cluster, uint32_t filter_attributes, bool exclude);

	void ModifyDirectoryEntry(uint32_t cluster, const char* name, DirEntry modified);

	int PrepareAddedDirectory(uint32_t cluster);
	void CleanFileEntry(uint32_t cluster, DirEntry entry);
	
	int DirectorySearch(const char* FilePart, uint32_t cluster, DirEntry* file);
	int DirectoryAdd(uint32_t cluster, DirEntry file);

	int OpenFile(const char* filePath, DirEntry* fileMeta);
	int CreateFile(const char* filePath, DirEntry* fileMeta);
	int DeleteFile(DirEntry fileMeta);

	int ReadFile(DirEntry fileMeta, uint64_t offset, void* buffer, uint64_t bytes);
	int WriteFile(DirEntry fileMeta, uint64_t offset, void* buffer, uint64_t bytes);
	int ResizeFile(DirEntry fileMeta, uint32_t new_size);

	uint32_t GetRootDirStart() const { return RootDirStart; }

public:
	static int InitialiseFAT32(FAT32_Data data);
	static FAT32Driver* CreateFAT32(FAT32_Data data);

private:
	uint32_t ReadFAT(uint32_t cluster);
	uint32_t WriteFAT(uint32_t cluster, uint32_t value);

	uint32_t ReadCluster(uint32_t cluster, void* buffer);
	uint32_t WriteCluster(uint32_t cluster, void* buffer);

	std::vector<uint32_t> GetClusterChain(uint32_t start);

	uint32_t AllocateClusterChain(uint32_t size);
	void FreeClusterChain(uint32_t start);

	void* ReadClusterChain(uint32_t start, uint32_t& size);
	void WriteClusterChain(uint32_t start, void* buffer, uint32_t size);
	void ResizeClusterChain(uint32_t start, uint32_t new_size);

	void GetDirectoriesOnCluster(uint32_t cluster, std::vector<DirEntry>& entries);
	
private:
	uint32_t GetClusterFromFilePath(const char* filePath, DirEntry* entry);

	DirEntry FromFATEntry(DirectoryEntry* entry, bool long_fname);
	DirectoryEntry* ToFATEntry(DirEntry entry, uint32_t& longEntries);

	bool Compare(DirectoryEntry* entry, const char* name, bool long_name);

	void ConvertFromFATFormat(char* input, char* output);
	int IsFATFormat(char* name);
	char* ConvertToFATFormat(char* input);

	static uint8_t GetMilliseconds();
	static uint16_t GetTime();
	static uint16_t GetDate();

private:
	std::fstream file;

	uint8_t* temporaryBuffer;
	uint8_t* temporaryBuffer2;
	uint8_t* FATcache;

	FAT32_BootSector* BootSector;

	uint32_t FirstDataSector;
	uint32_t RootDirStart;

	uint32_t ClusterSize;

	uint32_t TotalSectors;
	uint32_t TotalClusters;
};

#endif